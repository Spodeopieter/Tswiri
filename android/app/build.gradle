def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
   def keystorePropertiesFile = rootProject.file('key.properties')
   if (keystorePropertiesFile.exists()) {
       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
   }



android {
    compileSdkVersion 31
    
    ndkPath = "/home/werner/sdk/ndk/24.0.8215888/"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.scholtz.sunbird"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        // ndk {
        //     abiFilters += listOf("arm64-v8a")
        // }

    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }
   buildTypes {
       release {
           signingConfig signingConfigs.release
       }
   }
   aaptOptions {
        noCompress 'tflite'
        noCompress 'lite'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:28.4.2')
    implementation 'com.google.firebase:firebase-core:16.0.9'
    
    implementation 'com.google.android.gms:play-services-mlkit-barcode-scanning:16.2.1'

    implementation 'com.google.android.gms:play-services-mlkit-image-labeling:16.0.5'
    implementation 'com.google.mlkit:image-labeling-custom:16.3.1'
    implementation 'com.google.mlkit:image-labeling-automl:16.2.1'
    implementation 'com.google.mlkit:translate:16.1.2'
    implementation 'com.google.mlkit:entity-extraction:16.0.0-beta2'

    implementation 'com.google.mlkit:object-detection:16.2.7'
    implementation 'com.google.mlkit:object-detection-custom:16.3.3'
    implementation 'com.google.mlkit:linkfirebase:16.1.1'

    implementation 'com.google.mlkit:text-recognition:16.0.0-beta1'
}

android.buildTypes.release.ndk.debugSymbolLevel = 'symbol_table'